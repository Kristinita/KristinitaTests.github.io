#######
# v8r #
#######
# [OVERVIEW] v8r — validate configuration files based on their JSON Schema.
# https://chris48s.github.io/v8r/
#
# [INFO] v8r automatically validates files which schemas exists on JSON Schema Store,
# and allow validating files which schemas in another place.
#
# [NOTE] v8r detect all errors even if exhaustive and updated schema for the configuration file exists.
# But, for example, v8r doesn’t detect all errors for files “.travis.yml” and “appveyor.yml”,
# because their schemas obsolete and isn’t full.
# I can add “kira_random_key: true” to “.travis.yml” and “appveyor.yml”, and v8r will not detect the error.
#
#
# [LEARN][SCHEMA] JSON Schema — a specification of structuring of JSON, JSON5, YAML and TOML documents:
# https://habr.com/ru/companies/otus/articles/851512/
#
# [LEARN][SCHEMA] JSON Schema Store — repository with JSON schemas:
# https://www.schemastore.org/json/
#
# [LEARN][SCHEMA] “required” key for required properties:
# https://tour.json-schema.org/content/01-Getting-Started/03-Required-Properties
# If the property contains in values of “required” key of JSON Schema, but it not exists in the configuration file,
# v8r returns error.
#
# [LEARN][SCHEMA] “additionalProperties: false” key for disallowing additional properties:
# https://tour.json-schema.org/content/03-Objects/02-Additional-Properties
# If configuration file contain properties that not exists in schema with “additionalProperties: false”,
# v8r returns error.
#
#
# [CONFIGURATION]
# https://chris48s.github.io/v8r/configuration/
# Configuration keys may be used as command-line arguments.
#
# [PLUGINS]
# https://chris48s.github.io/v8r/plugins/using-plugins/
#
# [FAQ]
# https://chris48s.github.io/v8r/faq/
#
# [INFO] Supported JSON Schema drafts:
# https://chris48s.github.io/v8r/faq/#-what-json-schema-versions-are-compatible
#
# [INFO] Available parsers for v8r:
# https://github.com/chris48s/v8r/tree/main/src/plugins
#
# [INFO] If the schema exists in Schema Store, but v8r returns the error “Could not find a schema to validate”
# check values of the “fileMatch” key of the required schema in the “catalog.json” file of Schema Store:
# https://github.com/chris48s/v8r/issues/577
# https://github.com/SchemaStore/schemastore/pull/4530


# [INFO] Caching time (in seconds) of responses to requests to Schema Store.
# 86400 seconds = 1 day.
# v8r use caching results during the day since the last request.
# After the day v8r make new requests.
cacheTtl: 86400


# [NOTE] v8r doesn’t lint files with non-standard extensions like “.htmlhintrc” and “.yamllint”.
# User needs manually set validation for these files:
# https://github.com/chris48s/v8r/issues/578
#
# [NOTE] EditorConfig has JSON Schema:
# https://raw.githubusercontent.com/editorconfig/editorconfig-defaults/refs/heads/master/editorconfig-defaults.schema.json
# But I can’t validate “.editorconfig” use v8r TOML parser. I get the error.
# v8r haven’t INI parser.
customCatalog:
  schemas:
  - description: Temporary Schema for “.htmlhintrc” file

    fileMatch:
    - .htmlhintrc

    location: https://json.schemastore.org/htmlhint.json

    name: HTMLHint

    parser: json


  - description: Temporary Schema for “.jshintrc” file

    fileMatch:
    - .jshintrc

    location: https://json.schemastore.org/jshintrc.json

    name: JSHint

    parser: json5


  - description: Temporary Schema for “.yamllint” file

    fileMatch:
    - .yamllint

    location: https://json.schemastore.org/yamllint.json

    name: YAMLLint

    parser: yaml


  # [FIXME][ISSUE] “pyrightconfig.schema.json” has keys “allowComments” and “allowTrailingCommas”.
  # These keys are undocumented in JSON Schema.
  # Except Pyright, solely Biome, iTwin and Oracle use them.
  #
  # Ajv recognizes Pyright schema as non-valid:
  #
  # ```shell
  # D:\SashaDemoRepositories\KiraJSONSchemas>ajv -d pyrightconfig.json -s pyrightschema.json --verbose
  # schema pyrightschema.json is invalid
  # error: strict mode: unknown keyword: "allowComments"
  # ```
  #
  # v8r doesn’t recognize these undocumented keys and parse the file “pyrightconfig.json” as hardcore JSON.
  #
  # I need to create an issue about this problem in Pyright repository.
  - description: Temporary Schema for “pyrightconfig.json” file

    fileMatch:
    - pyrightconfig.json

    location: https://raw.githubusercontent.com/microsoft/pyright/main/packages/vscode-pyright/schemas/pyrightconfig.schema.json

    name: Pyright

    parser: json5


# [INFO] Array of configuration files for v8r validation:
patterns:
- .commitlintrc.yaml
- .htmlhintrc
- .jshintrc
- .markdownlint.yaml
- .remarkrc.yaml
- .stylelintrc.yaml
- .travis.yml
- .v8rrc.yaml
- .yamllint
- appveyor.yml
- coffeelint.json
- package.json

# [BUG] If “verbose: 2”, v8r exits with code 1 when linting “pyproject.toml”:
# https://github.com/chris48s/v8r/issues/579
- pyproject.toml
- pyrightconfig.json
- ruff.toml

# [INFO] “verbose: 2” is too detailed verbosity for everyday usage.
#
# [NOTE] “v8r pyproject.toml” prints too detailed output even for “verbose: 0”:
# https://ci.appveyor.com/project/Kristinita/sashatravis/builds/51652835#L22
verbose: 1
