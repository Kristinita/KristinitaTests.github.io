########
# Ruff #
########
# [OVERVIEW] Ruff — fast Python linter and formatter, a wrapper for dozens tools and plugins:
# https://docs.astral.sh/ruff/
#
#
# [CONFIGURATION]
# https://docs.astral.sh/ruff/tutorial/#configuration
# https://docs.astral.sh/ruff/configuration/
#
#
# [CLI]
# https://docs.astral.sh/ruff/configuration/#jupyter-notebook-discovery
#
# [CLI][OPTION] The option “--show-files” shows a list of files for checking.
# Ruff doesn’t check files when this option enabled.
#
#
# [IGNORING][INLINE_IGNORING] Ruff supports “# noqa: {code}” comments for ignoring a rule in a single line
# and “# ruff: noqa: {code}” comments for ignoring a rule for an entire file.
# https://docs.astral.sh/ruff/tutorial/#ignoring-errors
# https://docs.astral.sh/ruff/linter/#error-suppression
#
# [IGNORING][INLINE_IGNORING][NOTE] Ruff doesn’t support ignoring code blocks like Pylint and ESLint.
# It doesn’t support the syntax like “# ruff: noqa: on: E501”/“ruff: noqa: off: E501”:
# https://github.com/astral-sh/ruff/issues/3711
#
# [IGNORING][PER_FILE_IGNORING] Ruff supports ignoring rules for specific files via the option “[lint.per-file-ignores]”:
# https://docs.astral.sh/ruff/settings/#lint_per-file-ignores
# https://docs.astral.sh/ruff/linter/#error-suppression
#
#
# [FORMATTER]
# https://docs.astral.sh/ruff/formatter
#
# [FORMATTER][NOTE] Ruff formatter is designed to be a drop-in replacement for Black.
# I don’t use Ruff formatter, it imposes trailing commas as Black.
# I use Autopep8 instead:
# https://github.com/hhatto/autopep8
#
# [FORMATTER][INFO] Docstrings formatter:
# https://docs.astral.sh/ruff/formatter/#docstring-formatting
#
# [FORMATTER][NOTE] I use Docformatter, not Ruff for formatting docstrings:
# https://docformatter.readthedocs.io/en/latest/
#
# [FORMATTER][IGNORING] Ruff supports “# fmt: on”, “# fmt: off” and “# fmt: skip” pragma comments
# for disabling formatting in specific code blocks:
# https://docs.astral.sh/ruff/formatter/#format-suppression
#
#
# [FAQ]
# https://docs.astral.sh/ruff/faq/
#
# [FIXES][INFO] Automatically fixing:
# https://docs.astral.sh/ruff/linter/#fixes


# [OPTION] “The line length to use when enforcing long-lines violations (like E501)
# and at which Isort and the formatter prefers to wrap lines”:
# https://docs.astral.sh/ruff/settings/#line-length
line-length = 120

# [OPTION] Enable non-stable features:
# https://docs.astral.sh/ruff/preview/
# https://docs.astral.sh/ruff/preview/#enabling-preview-mode
# https://docs.astral.sh/ruff/settings/#lint_preview
# https://docs.astral.sh/ruff/settings/#format_preview
preview = true

# [OPTION] Automatically exclude folders and files that are ignored in files “.ignore”, “.gitignore”,
# “.git/info/exclude” and in the global gitignore file:
# https://docs.astral.sh/ruff/settings/#respect-gitignore
respect-gitignore = true

# [OPTION] Show information about all fixed problems:
# https://docs.astral.sh/ruff/settings/#show-fixes
show-fixes = true

# [OPTION] Specify Python version.
# 1. Pyupgrade proposes upgrading Python syntax to this version.
# 2. Linters doesn’t report about problems specific for earlier versions.
# https://docs.astral.sh/ruff/settings/#target-version
#
# [NOTE] Ruff doesn’t allow setting the Python version dynamically use values like “current” or “latest”.
# Users need manually set the value of the option and manually update it when new Python version be released.
# https://github.com/astral-sh/ruff/issues/16418#issuecomment-2816694789
target-version = "py313"

# [OPTION] Enable unsafe fixes:
# https://docs.astral.sh/ruff/settings/#unsafe-fixes
# https://docs.astral.sh/ruff/linter/#fix-safety
unsafe-fixes = true


[format]

# [OPTION] Ignore “magic trailing commas” needed for Black formatting:
# https://docs.astral.sh/ruff/settings/#format_skip-magic-trailing-comma
# https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#the-magic-trailing-comma
skip-magic-trailing-comma = true


[lint]

# [OPTION] List of symbols similar by ASCII characters that Ruff allows to use in docstrings, strings and comments.
# By default, Ruff doesn’t allow using them:
# https://docs.astral.sh/ruff/settings/#lint_allowed-confusables
# I use the symbol “’” in expressions like “I don’t” and “I haven’t”.
allowed-confusables = ["’"]

# [OPTION] The list of fixable rules. “ALL” — Ruff considers fixable all rules.
# https://docs.astral.sh/ruff/linter/#disabling-fixes
# https://docs.astral.sh/ruff/settings/#lint_fixable
fixable = ["ALL"]

# [OPTION] Ignore rules:
# https://docs.astral.sh/ruff/settings/#lint_ignore
#
# ---
#
# [PRESETS] I use these Ruff presets:
#
# 1. Ruff-specific rules — rules created especially for Ruff, i.e. not rules ported from another linters:
# https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
#
#
# 2. Pyupgrade rules:
# https://docs.astral.sh/ruff/rules/#pyupgrade-up
#
#############
# Pyupgrade #
#############
# [OVERVIEW] Pyupgrade — a Python tool to automatically upgrade syntax for newer versions of the language:
# https://github.com/asottile/pyupgrade
#
# [RULES]
# https://github.com/asottile/pyupgrade#implemented-features
#
# [CLI][NOTE] Pyupgrade hasn’t the option like “--check” or “--dry-run” for previewing changes.
# So I use Pyupgrade via Ruff wrapper.
# The author of the Pyupgrade closed issues and pull requests about adding “--dry-run”
# and locked conversations with inadequate comments as “spam”:
# https://github.com/asottile/pyupgrade/issues/210
# https://github.com/asottile/pyupgrade/issues/258
# https://github.com/asottile/pyupgrade/issues/310
# https://github.com/asottile/pyupgrade/issues/356
# https://github.com/asottile/pyupgrade/issues/781
#
# https://github.com/asottile/pyupgrade/pull/370
# https://github.com/asottile/pyupgrade/pull/845
#
#
# 3. Pygrep-hooks rules:
# https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
#
################
# Pygrep-hooks #
################
# [OVERVIEW] pygrep-hooks — a collection of custom checks for Python files:
# https://github.com/pre-commit/pygrep-hooks#provided-hooks
#
# [RULES]
# https://github.com/pre-commit/pygrep-hooks?tab=readme-ov-file#provided-hooks
#
# [USAGE][NOTE] Users can install Pygrep-hooks solely as the pre-commit hook.
# Users can’t install Pygrep-hooks via “pip install pygrep-hooks”.
# If user don’t use pre-commit hooks, he can’t use the original Pygrep-hooks.
# So I use Pygrep-hooks via the Ruff wrapper.
#
#
# 4. All another non-ignored presets.
#
# ---
#
# [PRESETS][IGNORING] I ignore Ruff presets in 2 cases:
# 1. I already use linters which Ruff wrapped.
# 2. I don’t want to use preset.
#
# [PRESETS][IGNORING]
#
# 1. The list of linters that I already use. I don’t need a wrapper for them:
#
# “A” — flake8-bulitins, “ANN” — flake8-annotations, “ARG” — flake8-unused-arguments, “B” — Bugbear,
# “C4” — flake8-comprehensions, “C90” — McCabe, “D” — Pydocstyle, “DOC” — Pydoclint, “DTZ” — flake8-datetimez,
# “E” — Pycodestyle errors, “EM” — flake8-errmsg, “ERA” — Eradicate, “F” — Pyflakes, “FBT” — Flake8 Boolean Trap,
# “FLY” — Flynt, “FURB” — Refurb, “G” — flake8-logging-format, “I” — Isort, “ISC” — flake8-implicit-str-concat,
# “LOG” — flake8-logging, “N” — PEP8 naming, “Q” — flake8-quotes, “PERF” — Perflint, “PL” — Pylint, “PIE” — Pie,
# “PTH” — flake8-use-pathlib, “RET” — flake8-return, “RSE” — flake8-raise, “S” — Bandit, “SIM” — flake8-simplify,
# “TC” — flake8-type-checking, “TID” — flake8-tidy-imports, “TRY” — Tryceratops, “W” — Pycodestyle warnings.
#
#
# 2. The list of linters which I don’t want to use:
#
# [PRESET] “COM”, flake8-commas — Flake8 plugin that enforce using trailing commas in Python files:
# https://github.com/PyCQA/flake8-commas/
# [DISABLING_REASON] This plugin imposes using trailing commas. I don’t want to have them.
#
# [PRESET] “CPY”, flake8-copyright — a checker of copyright notices in all Python files:
# https://github.com/savoirfairelinux/flake8-copyright
# [DISABLING_REASON] I don’t use copyright notices.
#
# [PRESET] “FIX”, flake8-fixme — a checker of “FIXME” and other temporary developer notes in Python files:
# https://github.com/tommilligan/flake8-fixme
# [DISABLING_REASON] On practice, third-party tools always have problems. I need to mark them.
# If I were writing issues and pull requests for each problem, I wouldn’t have a time for anything else.
# A code without third-party problems isn’t possible for the real world.
#
# [PRESET] “INP”, flake8-no-pep420 — disallow directories of Python files without the file “__init__.py”:
# https://github.com/adamchainz/flake8-no-pep420
# [DISABLING_REASON] Files “__init__.py” are redundant in some cases.
# Testing tools with options supports directories without “__init__.py”.
#
# ---
#
# [PRESETS][NOTE] Ruff documentation hasn’t information about rules that Ruff developers added to presets
# in addition to original rules of linters.
# Users can’t quickly determine, has Ruff preset additional rules, or it just duplicates rules from the original tool/plugin.
# It’s a key moment for deciding whether to ignore the preset.
# https://github.com/astral-sh/ruff/issues/17481
#
# [PRESETS][NOTE] Ruff hasn’t the preset for SonarQube rules:
# https://github.com/astral-sh/ruff/issues/4935#issuecomment-2816780297
ignore = ["A", "ANN", "ARG", "B", "C4", "C90", "COM", "CPY", "D", "DOC", "DTZ", "E", "EM", "ERA", "F", "FBT", "FIX", "FLY", "FURB",
	"G", "I", "INP", "ISC", "LOG", "N", "Q", "PERF", "PIE", "PL", "PTH", "RET", "RSE", "S", "SIM", "TC", "TID", "TRY", "W"]

# [OPTION] The list of enabled presets and rules. By default, Ruff enables presets “["E4", "E7", "E9", "F"]”.
# “ALL” — enable all Ruff presets:
# https://github.com/astral-sh/ruff/discussions/4237#discussioncomment-5815187
# https://docs.astral.sh/ruff/linter/#rule-selection
# https://docs.astral.sh/ruff/settings/#lint_select
select = ["ALL"]
